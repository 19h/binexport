// A .BinExport file contains a header, a Meta message, a Callgraph message
// and an arbitrary number of flow graph messages in this order.
// The header is binary, little endian and contains:
//   uint32          meta_offset;         // file offset for the meta message
//   uint32          call_graph_offset;   // file offset for the call graph
//   uint32          num_flow_graphs;     // number of flow graph messages
// The following are repeated n times with n = number of flow graphs
//     uint64        flow graph address;  // entry point address of flow graph
//     uint32        flow graph offset;   // file offset for the flow graph

// We make BinExport a package instead of a container message because the
// protocol buffer advises not to make individual messages larger than about 1MB
// If we put all flow graphs and the call graph together into a single message
// it will easily exceed this limit. We don't want to be forced to hold the
// entire file in memory at once (we've seen samples >1GB in size).

syntax = "proto2";

package BinExport;

option java_package = "com.google.protos.BinExport";
option java_outer_classname = "BinExport";

message Meta {
  // Input binary filename including file extension but excluding file path.
  // example: "insider_gcc.exe"
  optional string input_binary = 1;

  // Raw hash. It may have additional information appended (if the
  // unpacker dumped multiple processes from a single binary for example).
  optional bytes input_hash = 2;

  // 32/64 bit address space? Contains the number of addressing bits used.
  optional uint32 input_address_space = 3;

  // Purely informational attribute for displaying the instruction set
  // architecture of the exported binary in a UI.
  optional string architecture_name = 4;

  // A hint for the UI to aid in mnemonic alignment. This is mostly relevant
  // when exporting a binary of an architecture with elaborate mnemonic
  // names (like "move-result-object" in Dalvik).
  optional uint32 max_mnemonic_len = 5;

  // Note for all of the counts: only non-library functions are counted!
  // Total number of instructions. Shared basicblocks are counted multiple
  // times.
  optional uint32 num_instructions = 6;
  // Total number of non-library functions.
  optional uint32 num_functions = 7;
  // Total number of non-library basic blocks.
  optional uint32 num_basicblocks = 8;
  // Total number of conditional/unconditional/switch jumps.
  optional uint32 num_edges = 9;
}

message Callgraph {
  message Vertex {
    // Function entry point address.
    required uint64 address = 1;

    // Function prime. "prime" is the historical name, the number isn't really
    // prime. Think of it as a hash calculated from the function's instruction
    // mnemonics like so:
    // hash = 0;
    // for ( every basic block in function )
    //   for ( every instruction in basic block )
    //     hash += getHash( mnemonic );
    // where getHash( mnemonic ) is defined as
    // hash = 1
    // for ( every ASCII character in mnemonic )
    //   hash *= pow( prime[ASCII code], character position )
    // with prime[] being a table of the first 256 prime numbers
    required uint64 prime = 2;

    enum FunctionType {
      NORMAL = 0;  // Regular function with full disassembly.

      // This function is a well known library function as recognized by IDA's
      // FLIRT signatures.
      LIBRARY = 1;
      IMPORTED = 2;  // Imported from a dynamic link library (e.g. dll).

      // A thunk function, forwarding its work via an uncondional jump.
      THUNK = 3;

      // Invalid function (a function that contained invalid code or was
      // considered invalid by some heuristics).
      INVALID = 4;
    }
    optional FunctionType function_type = 3 [default = NORMAL];

    // Does the function have a real, i.e. user defined name or is it auto-
    // generated? For Example: "getDisplayName" vs "sub_0400100F".
    optional bool has_real_name = 4 [default = false];

    // The function's mangled name.
    optional string mangled_name = 5;

    // The function's demangled name, if any. If demangling failed or
    // demangled and mangled names are identical this field will be empty.
    optional string demangled_name = 6;
  }

  message Edge {
    // Source function entry point address.
    required uint64 source_function_address = 1;

    // Source instruction address.
    required uint64 source_instruction_address = 2;

    // Target function entry point address.
    required uint64 target_address = 3;
  }

  // vertices == functions for call graphs
  repeated Vertex vertices = 1;

  // edges == calls for call graphs
  repeated Edge edges = 2;
}

message Flowgraph {
  message Vertex {
    message Instruction {
      // Instruction address.
      required uint64 address = 1;

      // Instruction "prime", see documentation for Callgraph.Vertex.prime above
      required uint32 prime = 2;

      // If the instruction is referencing string data in its operands we store
      // a hash of that data. This is useful for the differ since instructions
      // referencing the same data can often be matched with high confidence.
      // The hash function used is SDBM as documented here:
      // http://www.cse.yorku.ca/~oz/hash.html
      optional uint32 string_reference = 3 [default = 0];

      // Plain text version of the mnemonic (without any operands), i.e. "mov".
      optional string mnemonic = 4;

      // Text representation of the instruction's operands. Annotated with
      // syntax highlighting/type information, so the string will contain
      // non-printable ASCII characters. Example:
      // "\5ebp\8, \5esp"
      // valid markup bytes are:
      // TYPE_MNEMONIC           = 0,
      // TYPE_SYMBOL             = 1,
      // TYPE_IMMEDIATE_INT      = 2,
      // TYPE_IMMEDIATE_FLOAT    = 3,
      // TYPE_OPERATOR           = 4,
      // TYPE_REGISTER           = 5,
      // TYPE_SIZEPREFIX         = 6,
      // TYPE_DEREFERENCE        = 7,
      // TYPE_NEWOPERAND         = 8,
      // TYPE_STACKVARIABLE      = 9,
      // TYPE_GLOBALVARIABLE     = 10,
      // TYPE_JUMPLABEL          = 11,
      // TYPE_FUNCTION           = 12,
      optional string operands = 5;

      // Raw input bytes used to generate the disassembly for this instruction.
      optional bytes raw_bytes = 6;

      // The target addresses (if any) of a call instruction. Note that this
      // may be zero, one or more. A single instruction can have multiple call
      // targets in a situation like this: "call [ebp + eax * 4]".
      repeated uint64 call_targets = 7;

      message Comment {
        // Comment string. Unknown source encoding. I believe IDA always emits
        // ASCII though.
        required string comment = 1;

        // Store IDA comment attributes and the operand id this comment should
        // be applied to.
        required uint32 flags = 2;
          // flags = repeatable | ( type << 1 ) | ( operandId << 16 )
          // repeatable = 0 | 1
          // type =
          //   REGULAR         = 0,
          //   ENUM            = 1,
          //   ANTERIOR        = 2,
          //   POSTERIOR       = 3,
          //   FUNCTION        = 4,
          //   LOCATION        = 5,
          //   GLOBALREFERENCE = 6,
          //   LOCALREFERENCE  = 7,
          //   operandId = 0 | 1 (on intel at least)
      }
      repeated Comment comments = 8;
    }

    // Basic block "prime", see documentation for Callgraph.Vertex.prime above.
    required uint64 prime = 1;

    // A basic block must always have more than zero instructions. I don't know
    // how to embed this requirement in the repeated proto type though?
    repeated Instruction instructions = 2;
  }

  message Edge {
    // Source instruction address.
    required uint64 source_address = 1;

    // Target instruction address.
    required uint64 target_address = 2;

    enum EdgeType {
      // This branch will be taken if the expression evaluates to true/false.
      CONDITION_TRUE = 1;
      CONDITION_FALSE = 2;
      UNCONDITIONAL = 3;  // An unconditional branch.
      SWITCH = 4;  // Branch from a switch table, e.g. "jmp eax".
    }
    optional EdgeType type = 3 [default = UNCONDITIONAL];
  }

  // Entry point address. Note that this may not necessarily be the address of
  // the first instruction of the first basic block. This is because basic
  // blocks are stored sorted by address and the lowest address doesn't have to
  // be the function entry point.
  required uint64 address = 1;

  // vertices == basic blocks for flow graphs
  // Every flow graph message will have at least one basic block. There can be
  // functions without basic blocks (e.g. dynamically linked). These will have a
  // corresponding vertex in the call graph but not flow graph message.
  repeated Vertex vertices = 2;

  // edges == branches for flow graphs
  repeated Edge edges = 3;

  // Not used. Just here to mark the protobuf id as used.
  //  optional double mdindex = 4;
}
